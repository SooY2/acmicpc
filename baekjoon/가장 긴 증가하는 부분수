/*가장 긴 증가하는 부분수열
dp에 저장할거 -> 해당 인덱스의 가장 긴 수열의 길이*/
#include <iostream>
#include <algorithm>
using namespace std;

int arr[1005];
int n;
int dp[1005];

void input() {
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> arr[i];
	}
	return;
}

void slove() {
	dp[1] = 1;
	for (int i = 2; i <= n; i++) {
		int max = -1;
		for (int j = i - 1; j >= 0; j--) {
			if (arr[i] > arr[j] && dp[j] > max) {
				dp[i] = dp[j] + 1;
				max = dp[j];
			}
		}
	}
	return;
}

void show() {
	cout << *max_element(dp, dp + n + 1);
	return;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	input();
	slove();
	show();

	return 0;
}
