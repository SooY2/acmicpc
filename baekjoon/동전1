/*2293 동전1

dp[만들어야하는 수][주어진 동전] = 주어진 동전포함하여 주어진동전보다 작은 주어진 동전들로 만들 수 있는 경우의 수
arr[인덱스]=주어진 동전들(오름차순)

dp[i][j]=dp[i-arr[j]][j]+dp[i][j-1];

arr	1	2	5
dp	0	1	2
0	
1	1	1	1
2	1	2	2
3
4
5
6
7
8
9
10

-----------------------------2차원 배열 쓰면 시간초과남--------------
--> 1차원 배열로 만들어야함
dp[k]배열을 만들어서 동전을 추가할 때마다 해당 자리에 경우의 수 추가해주기

*/
#include <iostream>
#include <algorithm>
using namespace std;

int n,k;
int dp[10001];
int arr[101];

void input() {
	cin >> n >> k;
	for (int i = 1; i <= n; i++) {
		cin >> arr[i];
		
	}
	//sort(arr, arr + n);

	return;
}

void slove() {
	dp[0] = 1;

	for (int i = 1; i <= n; i++) {
		for (int j = arr[i]; j <= k; j++) {
			dp[j] += dp[j - arr[i]];
			cout << dp[j] << " ";
		}
		cout << "\n";
	}



	return;
}
void show() {
	cout << dp[k];
	return;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	input();
	slove();
	show();

	return 0;
}
