/*17471 게리맨더링

인접리스트로 그래프 만들기

조합 만들고 조합에 안들어간게 나머지 집합
조합이 1개 이상이면-> 두 조합이 하나 이상인지, 연결되어있는지 확인
둘 다 true면 개수 세서 차이 저장

**조합으로 만든 노드의 그래프가 연결되었는지 확인하는게 어려웠음
* 방문했는지와 조합을 선택했는지 배열로 확인하여 연결채크

*/
#include <iostream>
#include <vector>
#include<queue>
#include<algorithm>
#include <cmath>

using namespace std;

int n, tmp, ans = 100000;
int val[11];
vector<int> map[11];
bool ch[11];
vector<int> com1;
vector<int> com2;
bool isable;

void input() {
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> val[i];
	}
	for (int i = 1; i <= n; i++) {
		int a;
		cin >> a;
		while (a--) {
			int b;
			cin >> b;
			map[i].push_back(b);
		}
	}
	return;
}

bool isconnect(vector<int> &v,bool select) {//연결되어있는지 확인, select값은 선택했는지 안했는지 확인하는 용도  ex) seclect가 true면 첫번째 조합, false면 두번째조합
	bool visited[11] = { 0 };
	int pos = v[0];
	queue<int> q;
	q.push(pos);
	visited[v[0]] = 1;
	int cnt = 1;

	while (!q.empty()) {
		pos = q.front();
		q.pop();
		for (auto value : map[pos]) {//노드 안의 값 다 꺼내서 넣어주기
			if (visited[value]||ch[value]!=select) {//이미 방문을 했거나 선택할 조합이 아니면
				continue;
			}
			visited[value] = 1;
			q.push(value);
			cnt++;
		}
	}
	
	if (v.size() == cnt) return true;
	else return false;
}

bool check(vector<int> &x, vector<int> &y) {
	if (x.empty() || y.empty()) return false;

	if (!isconnect(x, true)) return false;
	if (!isconnect(y, false)) return false;

	return true;
}

void cal(bool* ch) {
	int sum1 = 0;
	int sum2 = 0;

	for (int i = 1; i <= n; i++) {
		if (ch[i] == 1) sum1 += val[i];
		else sum2 += val[i];
	}

	ans = min(ans, abs(sum1 - sum2));
	return;
}


void combination(int st) {

	//조합이 한개이상이면 연결,개수 확인해주는 함수로 넘어가기
	if (com1.size() >= 1) {
		for (int i = 1; i <= n; i++) {
			if (ch[i] == 0) com2.push_back(i);
		}

		if (check(com1, com2)) {
			cal(ch);
			isable = 1;
		}
		/*
		cout << "com1= ";
		for (int i = 0; i < com1.size(); i++) {
			cout << com1[i] << " ";
		}
		cout << "    com2= ";
		for (int i = 0; i < com2.size(); i++) {
			cout << com2[i] << " ";
		}
		cout << "\n";
		*/ //조합 확인 코드

		com2.clear();

	}
	for (int i = st; i <= n; i++) {
		com1.push_back(i);
		ch[i] = 1;
		combination(i + 1);
		com1.pop_back();
		ch[i] = 0;
	}

}

void slove() {
	combination(1);//조합만드는함수

	return;
}
void show() {
	/*
	for (int i = 1; i <= n; i++) {
		cout << i << "(" << val[i] << ") : ";
		for (int j = 0; j < map[i].size(); j++) {
			cout << map[i][j] << " - ";
		}
		cout << "\n";
	}*/ //연결리스트 확인 코드
	if (isable == 0) cout << -1;
	else cout << ans;
	return;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	input();
	slove();
	show();

	return 0;
}
