/*22871 징검다리 건너기

가장 왼쪽에서 가장 오른쪽으로 건너갈 수 있는 경우 중 k의 최솟값 구하기
k는 한번 건너갈 때마다 쓸 수 있는 힘의 최대 -> 예를 들어 1-(3)-2-(2)-3 (힘)이면 이 경우에서 k는 3

dp배열에 n번째 돌까지 건널 수 있는 경우 중 k의 최솟값 저장
dp[2]는 0-2,1-2 경우의 수가 있음 
1. max(dp[1],1-2) -> 0-1과 1-2 중 큰값이 k, 정확한 k는 아니지만 결론적으로 구할 것은 최소이기 때문에 ㄱㅊ음
2. min(0-2,max(dp[1],1-2)) -> 두 k 중 최소값을 저장, 위와 마찬가지로 정확한 k가 아님 k의 최솟값

** 주의 
int long
*/
#include <iostream>
#include <algorithm>
using namespace std;

long rock[5005];
long dp[5005];

int main(){
    long n,p;
    cin>>n;
    for(long i=0;i<n;i++){
        cin>>rock[i];
    }


    for(long i=1;i<n;i++){
        dp[i]=1000000;
        for(long j=0;j<i;j++){
            if(rock[i]>=rock[j]){
                p=(i-j)*(1+rock[i]-rock[j]);
            }else p=(i-j)*(1+rock[j]-rock[i]);
            dp[i]=min(dp[i],max(dp[j],p));
        }
    }
    cout<<dp[n-1];
    return 0;

}
