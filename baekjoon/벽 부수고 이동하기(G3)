/*2206 벽부수고 이동하기
**방문여부 배열에 벽을 뚫었는지도 저장->3차원배열[x][y][wall]
-이동할 수 있고,방문안했는지
-이동할 수 없고,벽을 부실 수 있는지 (wall==0이면 부술 수o ->1로 바꿔서 q에 넣기)*/
#include <iostream>
#include <queue>
#include <string>
using namespace std;

int n, m;
int map[1001][1001];
bool check[1001][1001][2];//[x좌표][y좌표][벽 뚫었는지]
int result[1001][1001];

queue<pair<pair<int, int>, int>> q;

void input() {
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		string str;
		cin >> str;
		for (int j = 0; j < m; j++) {
			map[i][j] = str[j]-'0';
		}
	}
	return;
}

bool inside(int x, int y) {
	return (x >= 0 && x < n && y >= 0 && y < m);
}

int bfs(int x, int y, int wall) {
	q.push({ {x,y},wall });
	result[x][y] = 1;
	check[x][y][0] = 1;
	check[x][y][1] = 1;

	int move[5] = { -1,0,1,0,-1 };
	while (!q.empty()) {
		int xval = q.front().first.first;
		int yval = q.front().first.second;
		int wall = q.front().second;
		q.pop();

		if (xval == n-1 && yval == m-1) {
			return result[xval][yval];
		}

		for (int i = 0; i < 4; i++) {
			int nx = xval + move[i];
			int ny = yval + move[i + 1];

			if (inside(nx, ny)) {//map안에 있으면
				//방문 안했고, 이동할 수 있는경우
				if (map[nx][ny] == 0 && check[nx][ny][wall] == 0) {
					q.push({ {nx,ny},wall });
					result[nx][ny] = result[xval][yval] + 1;
					check[nx][ny][wall] = 1;
				}
				//이동할 수 없고, 뚫은 개수가 0인경우
				if (map[nx][ny] == 1 && wall == 0) {
					q.push({ {nx,ny},wall + 1 });
					check[nx][ny][wall + 1] = 1;
					result[nx][ny] = result[xval][yval] + 1;

				}
			}
		}
	}
	return -1;//다 끝났는데 리턴값 없으면 -1 리턴
}

void slove() {
	return;
}
void show() {
	/*for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << result[i][j]<<" ";
		}
		cout << "\n";
	}*///result 확인코드 
	cout << bfs(0, 0, 0);
	return;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	input();
	slove();
	show();

	return 0;
}
